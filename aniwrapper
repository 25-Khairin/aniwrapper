#!/usr/bin/env bash

set -Eeo pipefail

#############
#  Globals  #
#############
CMD="/usr/bin/ani-cli"
DEFAULT_DOWNLOAD="$HOME/Videos/sauce"
CFG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/aniwrapper"
CFG_FILE="aniwrapper.rasi"
QUALITIES="1. best (default)|2. 1080p|3. 720p|4. 480p|5. 360p|6. worst"
QUALITY="best"
PLAYER_CMD="mpv -config-dir ${XDG_CONFIG_HOME:-$HOME/.config}/mpv"
GET_QUALITY=0
VERBOSE=0
IS_ROFI=1
IS_DOWNLOAD=0
IS_PLAY_FROM_FILE=0

quit="6. Quit"
options="1. Stream|2. Download|3. Continue|4. Play from File|5. Sync History|$quit"
playable="\.mp4|\.mkv|\.ts|\.mp3"

#############
# Functions #
#############
log() {
	if [[ "$VERBOSE" -eq 1 ]]; then
		printf "%s\n" "$*"
	fi
}

seppuku() {
	printf "%s\n" "$*"
	exit 1
}

quit() {
	printf "%s\n" 'Quitting...'
	exit 0
}

run() {
	if [[ "$GET_QUALITY" -eq 1 ]]; then
		get_quality
	else
		log "QUALITY flag not set... using default -> $QUALITY"
	fi
	if [[ "$VERBOSE" -eq 0 ]]; then
		"$CMD" -q "$QUALITY" "$*"
	else
		"$CMD" -q "$QUALITY" -v "$*"
	fi
}

create_default_download() {
	# make sure download directory exists
	if [ ! -d "$DEFAULT_DOWNLOAD" ]; then
		mkdir -p "$DEFAULT_DOWNLOAD"
	fi
}

get_quality() {
	if [ "$IS_ROFI" -eq 1 ]; then
		selection=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 6 -theme-str 'listview {columns: 1;}' -p "Choose video quality:" \
			-sep '|' <<< "$QUALITIES")
		QUALITY=$(awk '{print $2}' <<< "$selection")
	else
		printf "%s" "Enter quality [ best|1080|720|480|360|worst ]: "
		read -r QUALITY
	fi
	log "selected quality: $QUALITY"
}

# opens the passed in file with $PLAYER_CMD
play_file() {
	log "Checking if file is playable"
	if [[ "$1" =~ ($playable)$ ]]; then
		log "File is playable..."
		if [[ "$1" =~ .mp3 ]]; then
			log ".mp3 file found... playing without video"
			log "MPV COMMAND: $PLAYER_CMD --no-video $1"
			$PLAYER_CMD --no-video "$1"
		else
			log "MPV COMMAND: $PLAYER_CMD $1"
			$PLAYER_CMD "$1"
		fi
		exit $?
	else
		seppuku "File: $1 is not playable... Quitting"
	fi
}

# generates a span mesg for rofi given
# input: message: str
generate_span() {
	msg="$*"
	span="<span foreground='peachpuff' style='italic' size='small' weight='light'>$msg</span>"
	printf "%s\n" "$span"
}

# attempt to generate list of valid files and directories
generate_inputlist() {
	# start at 2nd line, because first line out output from find is $1
	outstr=""
	while read -r directory; do
		if [[ "${directory// /}" == "" ]]; then
			continue
		fi
		if [[ "$outstr" == "" ]]; then
			outstr="$directory"
		else
			outstr="$outstr|$directory"
		fi
	done <<< "$(find "$1" -maxdepth 1 -type d | sed "s|$1/||" | tail -n +2 | sort -V)"
	log "DIRS: $outstr" 1> /dev/stderr
	while read -r filename; do
		if [[ "${filename// /}" == "" ]]; then
			continue
		fi
		if [[ "$outstr" == "" ]]; then
			outstr="$filename"
		else
			outstr="$outstr|$filename"
		fi
	done <<< "$(find "$1" -maxdepth 1 -type f | sed "s|$1/||" | grep -E "$playable$" | sort -V)"
	log "DIRS + FILES: $outstr" 1> /dev/stderr
	outstr="$outstr|Back|Quit"
	printf "%s\n" "$outstr"
}

# recursive function for finding path to video file given a starting directory
find_media() {
	inp="$1"
	[ -z "$inp" ] && inp="/"
	# workaround to allow logging w/o affecting return output
	log "INPUT DIR: $inp" 1> /dev/stderr

	# base case hit when a file is found
	if [ -f "$inp" ]; then
		printf "%s\n" "$inp"
		return 0
	fi

	span=$(generate_span "Current directory: $inp")
	inputlist=$(generate_inputlist "$inp")
	selection=$(rofi -dmenu -only-match -config "$CFG_DIR/$CFG_FILE" \
		-l 13 -i -sep '|' -mesg "$span" -p "Enter selection" <<< "${inputlist[@]}")

	if [ -z "$selection" ] || [ "$selection" = "Quit" ]; then
		return 1
	elif [ "$selection" = "Back" ]; then
		# go up one directory
		find_media "$(sed -E "s/(\/[^\/]*$)//" <<< "$inp")"
	elif [ -d "$inp/$selection" ] || [ -f "$inp/$selection" ]; then
		find_media "$inp/$selection"
		return $?
	fi
}

play_from_file() {
	if [[ $# -eq 0 ]]; then
		msg="Provide a valid path to a directory or leave blank to go with the default: $HOME/Videos/sauce/"
		msg="$(printf '%s\n%s\n' "$msg" "The program will begin searching for media files from the supplied directory")"
		span=$(generate_span "$msg")
		play_dir=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -mesg "$span" -p "Enter path to starting directory:")
	else
		play_dir="$1"
	fi
	[ -z "$play_dir" ] && play_dir="$DEFAULT_DOWNLOAD"
	[ "$play_dir" = "$DEFAULT_DOWNLOAD" ] && create_default_download
	log "STARTING DIR: $play_dir"
	[ ! -d "$play_dir" ] && seppuku "$play_dir does not exist"
	video_path=$(find_media "$play_dir") || quit
	log "VIDEO PATH: $video_path"
	if [ -z "$video_path" ]; then
		seppuku "Something went wrong getting path... path is empty"
	fi
	play_file "$video_path"
}

########
# Main #
########
while getopts 'vhqcdf:-:' OPT; do
	case "$OPT" in
		h)
			help_text
			;;
		v)
			VERBOSE=1
			;;
		q)
			GET_QUALITY=1
			log "Quality prompt enabled"
			;;
		c)
			IS_ROFI=0
			log "Command-line (ani-cli) mode set"
			;;
		d)
			IS_DOWNLOAD=1
			log "Download flag set..."
			;;
		f)
			IS_PLAY_FROM_FILE=1
			play_path="$OPTARG"
			log "Play from file flag set... skipping main menu"
			log "PLAY_PATH: $play_path"
			;;
		*)
			log "Invalid option"
			exit 1
			;;
	esac
done

log "CONFIG DIR: $CFG_DIR"

# Check if command-line flag is set
if [[ "$IS_ROFI" -eq 0 ]] && [[ "$IS_DOWNLOAD" -eq 0 ]]; then
	run -c
	exit $?
elif [[ "$IS_ROFI" -eq 0 ]] && [[ "$IS_DOWNLOAD" -eq 1 ]]; then
	printf "%s" "Enter download dir: "
	read -r dl_dir
	log "Download dir: $dl_dir"
	[ -d "$dl_dir" ] && mkdir -p "$dl_dir" || dir "Error creating directory: $dl_dir"
	run "-cd $dl_dir"
	exit $?
elif [[ "$IS_ROFI" -eq 1 ]] && [[ "$IS_PLAY_FROM_FILE" -eq 1 ]]; then
	play_from_file "$play_path"
	exit $?
fi

# -------------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------------
choice=$(echo "${options[@]}" | rofi -dmenu -only-match -sep '|' \
	-config "$CFG_DIR/$CFG_FILE" -l 6 -i -p "Aniwrapper")

[ "$choice" == "$quit" ] && quit

selection=$(printf "%s\n" "$choice" | awk '{ print $1 }')

case "$selection" in
	1.)
		# ---------------------------------------------------------------------------
		# streaming
		# ---------------------------------------------------------------------------
		log "Streaming mode"
		run
		;;
	2.)
		# ---------------------------------------------------------------------------
		# download
		# ---------------------------------------------------------------------------
		log "Download anime"
		dl_dir=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -p "Enter download dir:")
		# if dl_dir is none set to current directory
		[ "$dl_dir" == "" ] && dl_dir="$DEFAULT_DOWNLOAD"
		create_default_download
		run -d "$dl_dir"
		;;
	3.)

		# ---------------------------------------------------------------------------
		# continue
		# ---------------------------------------------------------------------------
		log "Continue watching"
		run -H
		;;
	4.)
		# ---------------------------------------------------------------------------
		# play
		# ---------------------------------------------------------------------------
		log "Play from file selected"
		play_from_file
		;;
	5.)
		log "Sync history database"
		username=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -p "Enter the username of the remote user:")
		if [[ -z "$username" ]] || [[ "$username" == "" ]]; then
			log "No username provided... exiting"
			exit 1
		fi
		host=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -p "Enter the host for the remote machine (eg 192.168.1.99):")
		if [[ -z "$host" ]] || [[ "$host" == "" ]]; then
			log "No host provided... exiting"
			exit 1
		fi
		port=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -p "Enter in the ssh port for remote machine or leave blank for default [22]:")
		if [[ -z "$port" ]] || [[ "$port" == "" ]]; then
			port=22
		fi
		keypath=$(rofi -dmenu -config "$CFG_DIR/$CFG_FILE" \
			-l 1 -p "Enter path to private key (leave blank if not needed or if unsure):")

		if [[ -z "$keypath" ]]; then
			printf "%s\n%s\n%d\n%s\n" "$username" "$host" "$port" "" | run -s
		else
			printf "%s\n%s\n%d\n%s\n" "$username" "$host" "$port" "$keypath" | run -s
		fi

		if [[ "$?" -ne 0 ]]; then
			log "Aniwrapper was unable to sync the databases..."
			exit 1
		else
			log "Databases synced successfully"
			quit
		fi
		;;
	6.)
		# ---------------------------------------------------------------------------
		# get out
		# ---------------------------------------------------------------------------
		quit
		;;
	*)
		log "Invalid choice..."
		exit 1
		;;
esac
